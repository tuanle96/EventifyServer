#!/usr/bin/env node

/**
 * Module dependencies.
 */
var debug = require('debug')('https-server');
var app = require('../app').app;
var serverHttp = require('../app').serverHttp;
var serverHttps = require('../app').serverHttps;
var io = require('../routes/io');

/**
 * Get port from environment and store in Express.
 */

var portHttps = normalizePort(process.env.PORT || '443'); //443
var portHttp = normalizePort(process.env.PORT || '8080'); //80
app.set('portHttps', portHttps);
app.set('portHttp', portHttp)

/**
 * Listen on provided port, on all network interfaces.
 */

//serverHttps.listen(portHttps);
serverHttp.listen(portHttp);
serverHttp.on('error', onError);
serverHttp.on('listening', onListening);
//serverHttps.on('error', onError);
//serverHttps.on('listening', onListening);



/**
 * Socket.io
 */
// var server = http.createServer(app)
// var io = app.io
io.attach(serverHttp);
//io.attach(serverHttps)
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof portHttps === 'string'
    ? 'Pipe ' + portHttps
    : 'Port ' + portHttps;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = serverHttp.address();
  //var addr = ""
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.portHttp;
  debug('Listening on ' + addr + "/" + bind);
}
